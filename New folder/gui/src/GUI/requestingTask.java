/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;
import database.classdb;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;



public class requestingTask extends javax.swing.JFrame {
    public static int code;
    public  void setLabel(){
//        jLabel1.setText(employees[0].getUserName()+" is requesting a new task.");
    }
    
    
    public requestingTask() {
        super("Admin UI [requestingTask]");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cancel = new javax.swing.JButton();
        taskCode = new javax.swing.JTextField();
        taskLabel = new javax.swing.JLabel();
        assignTask = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        taskassign = new javax.swing.JTable();
        idFirst = new javax.swing.JLabel();
        submit = new javax.swing.JButton();
        assign = new javax.swing.JButton();
        idCode = new javax.swing.JTextField();
        ted = new javax.swing.JLabel();
        tsdChooser = new com.toedter.calendar.JDateChooser();
        tedChooser = new com.toedter.calendar.JDateChooser();
        tsd = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        cancel.setText("CANCEL");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        taskCode.setEditable(false);
        taskCode.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        taskCode.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        taskCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taskCodeActionPerformed(evt);
            }
        });

        assignTask.setText("Assign A New Task");
        assignTask.setEnabled(false);
        assignTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignTaskActionPerformed(evt);
            }
        });

        exit.setBackground(new java.awt.Color(51, 0, 0));
        exit.setForeground(new java.awt.Color(255, 255, 255));
        exit.setText("EXIT");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        taskassign.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Task Title", "Assigned Employee", "Task Phase", "Start Date", "End Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(taskassign);

        idFirst.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        idFirst.setForeground(new java.awt.Color(102, 0, 0));
        idFirst.setText("Please Enter Your ID First");

        submit.setText("SUBMIT");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        assign.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        assign.setText("ASSIGN");
        assign.setEnabled(false);
        assign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignActionPerformed(evt);
            }
        });

        idCode.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        idCode.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        idCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idCodeActionPerformed(evt);
            }
        });

        ted.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N

        tsdChooser.setDateFormatString("yyyy-MM-dd");
        tsdChooser.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        tedChooser.setDateFormatString("yyyy-MM-dd");
        tedChooser.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        tsd.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(assignTask, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exit))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(186, 186, 186)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(94, 171, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(taskLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(taskCode, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ted, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                            .addComponent(tsd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tedChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tsdChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(assign)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(submit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(idCode, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40))
                    .addComponent(idFirst))
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(assign)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(taskLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(taskCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(idFirst)
                            .addGap(54, 54, 54))
                        .addComponent(idCode, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(tsd, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                        .addComponent(tsdChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(submit))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ted, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                            .addComponent(tedChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(exit, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(assignTask)
                                .addContainerGap())))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void taskCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taskCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_taskCodeActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_cancelActionPerformed

    private void assignTaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignTaskActionPerformed
        code = Integer.parseInt(taskCode.getText());
        if("false".equals(chk())){
            JOptionPane.showMessageDialog(null, "Not Found Task Code" , "",JOptionPane.ERROR_MESSAGE);
        }
        else if ("true".equals(chkAvalible())){
            JOptionPane.showMessageDialog(null, "This Task Has Been Already Taken .\nPlease , Choose Another Task ." , "",JOptionPane.ERROR_MESSAGE);
        }
        else{
            if ("true".equals(chk())) {
                newStartDate = df.format(tsdChooser.getDate());
                newEndDate = df.format(tedChooser.getDate());
                approveOrDisapprove e=new approveOrDisapprove();
                e.setVisible(true);
                this.setVisible(false);
            }
        }
        
    }//GEN-LAST:event_assignTaskActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_exitActionPerformed
public static String idadmin2task ; 
    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        // TODO add your handling code here:
        idadmin2task=idCode.getText();
        if("true".equals(chkAdminID())){
        assign.setEnabled(true);
        idFirst.setText("");
        }
        else{
            JOptionPane.showMessageDialog(null, "This is Not AN Admin ID.\nPlease Enter a valid ID .","",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_submitActionPerformed
public static DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
public static String newStartDate;
public static String newEndDate;
    private void assignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignActionPerformed
        // TODO add your handling code here:
        idCode.setEditable(false);
        submit.setEnabled(false);
        readtaskassign();
        taskLabel.setText("Enter new task code");
        tsd.setText("New Start Date");
        ted.setText("New End Date");
        taskCode.setEditable(true);
        assignTask.setEnabled(true);
        
    }//GEN-LAST:event_assignActionPerformed

    private void idCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idCodeActionPerformed

    /**
     * @param args the command line arguments
     */
    
    private  String chkAdminID(){
        String chk = null;
        Connection con = classdb.getCon();
        PreparedStatement ps = null ;
        ResultSet rs = null ;
        try {
            String log =  "SELECT * FROM admin WHERE ID = ? ;";
            ps = con.prepareStatement(log);
            ps.setString(1, idCode.getText());
            rs = ps.executeQuery();
            if (rs.next()) {
                return chk = "true";
            }
            else{
                
                return chk = "false";
            }
        } catch (HeadlessException | SQLException e) {
            JOptionPane.showMessageDialog(null, e,"",JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                rs.close();
                ps.close();
                con.close();
                
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "data was not been closed " +e,"",JOptionPane.ERROR_MESSAGE);
            }
        }
        return chk;
    
    }
    
    private  String chk(){
        String chk = null;
        Connection con = classdb.getCon();
        PreparedStatement ps = null ;
        ResultSet rs = null ;
        try {
            String log =  "SELECT * FROM tasks WHERE Code = ? ;";
            ps = con.prepareStatement(log);
            ps.setInt(1, code);
            rs = ps.executeQuery();
            if (rs.next()) {
                return chk = "true";
            }
            else{
                
                return chk = "false";
            }
        } catch (HeadlessException | SQLException e) {
            JOptionPane.showMessageDialog(null, e,"",JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                rs.close();
                ps.close();
                con.close();
                
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "data was not been closed " +e,"",JOptionPane.ERROR_MESSAGE);
            }
        }
        return chk;
    
    }
    
    private  String chkAvalible(){
        String chk = null;
        Connection con = classdb.getCon();
        PreparedStatement ps = null ;
        ResultSet rs = null ;
        try {
            String log =  "SELECT TaskPhase FROM tasks WHERE Code = ? ;";
            ps = con.prepareStatement(log);
            ps.setInt(1, code);
            rs = ps.executeQuery();
            String taskAvalible = rs.getString("TaskPhase");
            if ("Accepted".equals(taskAvalible)) {
                
                return chk = "true";
            }
            else{
                return chk = "false";
            }
        } catch (HeadlessException | SQLException e) {
            JOptionPane.showMessageDialog(null, e,"",JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                rs.close();
                ps.close();
                con.close();
                
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "data was not been closed " +e,"",JOptionPane.ERROR_MESSAGE);
            }
        }
        return chk;
    
    }
    
    private void readtaskassign(){
        Connection con = classdb.getCon();
        PreparedStatement ps = null ;
        ResultSet rs = null ;
        
        try {
            String sql = "SELECT Code , TaskTitle , AssignedEmployee , TaskPhase , StartDate , EndDate FROM tasks;";
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            while (rs.next()) {
                String c = String.valueOf(rs.getInt("Code"));
                String taskTitle = rs.getString("TaskTitle");
                String ae = rs.getString("AssignedEmployee");
                String taskPh = rs.getString("TaskPhase");
                String tasksd = rs.getString("StartDate");
                String tasked = rs.getString("EndDate");
                
                // 2 show in table
                String dataTable[] = {c,taskTitle,ae,taskPh ,tasksd ,tasked};
                DefaultTableModel dtm1 = (DefaultTableModel)taskassign.getModel();
                dtm1.addRow(dataTable);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "data was not been showed " +e,"",JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                rs.close();
                ps.close();
                con.close();
                
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "data was not been closed " +e,"",JOptionPane.ERROR_MESSAGE);
            }
        }
    
    
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(requestingTask.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new requestingTask().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assign;
    private javax.swing.JButton assignTask;
    private javax.swing.JButton cancel;
    private javax.swing.JButton exit;
    private javax.swing.JTextField idCode;
    private javax.swing.JLabel idFirst;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton submit;
    private javax.swing.JTextField taskCode;
    private javax.swing.JLabel taskLabel;
    private javax.swing.JTable taskassign;
    private javax.swing.JLabel ted;
    private com.toedter.calendar.JDateChooser tedChooser;
    private javax.swing.JLabel tsd;
    private com.toedter.calendar.JDateChooser tsdChooser;
    // End of variables declaration//GEN-END:variables
}
